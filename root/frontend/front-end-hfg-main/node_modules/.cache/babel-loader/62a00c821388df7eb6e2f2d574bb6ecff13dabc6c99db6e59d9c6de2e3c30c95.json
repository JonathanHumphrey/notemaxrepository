{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../app/api/apiSlice\";\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const usersApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => \"/users\",\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: \"User\",\n            id: \"LIST\"\n          }, ...result.ids.map(id => ({\n            type: \"User\",\n            id\n          }))];\n        } else return [{\n          type: \"User\",\n          id: \"LIST\"\n        }];\n      }\n    }),\n    addNewUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"POST\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidatesTags: [{\n        type: \"User\",\n        id: \"LIST\"\n      }]\n    }),\n    updateUser: builder.mutation({\n      query: initialUserData => ({\n        url: \"/users\",\n        method: \"PATCH\",\n        body: {\n          ...initialUserData\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    }),\n    deleteUser: builder.mutation({\n      query: _ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          url: `/users`,\n          method: \"DELETE\",\n          body: {\n            id\n          }\n        };\n      },\n      invalidatesTags: (result, error, arg) => [{\n        type: \"User\",\n        id: arg.id\n      }]\n    })\n  })\n});\nexport const {\n  useGetUsersQuery,\n  useAddNewUserMutation,\n  useUpdateUserMutation,\n  useDeleteUserMutation\n} = usersApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// creates memoized selector\nconst selectUsersData = createSelector(selectUsersResult, usersResult => usersResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUserIds\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => {\n  var _selectUsersData;\n  return (_selectUsersData = selectUsersData(state)) !== null && _selectUsersData !== void 0 ? _selectUsersData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","url","method","body","invalidatesTags","updateUser","deleteUser","_ref","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state","_selectUsersData"],"sources":["D:/LocalUniversityStuff/Spring2023/Human Factors/notemaxrepository/root/frontend/front-end-hfg-main/src/features/usersApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\r\n\r\nimport { apiSlice } from \"../app/api/apiSlice\";\r\n\r\nconst usersAdapter = createEntityAdapter({});\r\nconst initialState = usersAdapter.getInitialState();\r\n\r\nexport const usersApiSlice = apiSlice.injectEndpoints({\r\n\tendpoints: (builder) => ({\r\n\t\tgetUsers: builder.query({\r\n\t\t\tquery: () => \"/users\",\r\n\t\t\tvalidateStatus: (response, result) => {\r\n\t\t\t\treturn response.status === 200 && !result.isError;\r\n\t\t\t},\r\n\t\t\ttransformResponse: (responseData) => {\r\n\t\t\t\tconst loadedUsers = responseData.map((user) => {\r\n\t\t\t\t\tuser.id = user._id;\r\n\t\t\t\t\treturn user;\r\n\t\t\t\t});\r\n\t\t\t\treturn usersAdapter.setAll(initialState, loadedUsers);\r\n\t\t\t},\r\n\t\t\tprovidesTags: (result, error, arg) => {\r\n\t\t\t\tif (result?.ids) {\r\n\t\t\t\t\treturn [\r\n\t\t\t\t\t\t{ type: \"User\", id: \"LIST\" },\r\n\t\t\t\t\t\t...result.ids.map((id) => ({ type: \"User\", id })),\r\n\t\t\t\t\t];\r\n\t\t\t\t} else return [{ type: \"User\", id: \"LIST\" }];\r\n\t\t\t},\r\n\t\t}),\r\n\t\taddNewUser: builder.mutation({\r\n\t\t\tquery: (initialUserData) => ({\r\n\t\t\t\turl: \"/users\",\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tbody: {\r\n\t\t\t\t\t...initialUserData,\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t\tinvalidatesTags: [{ type: \"User\", id: \"LIST\" }],\r\n\t\t}),\r\n\t\tupdateUser: builder.mutation({\r\n\t\t\tquery: (initialUserData) => ({\r\n\t\t\t\turl: \"/users\",\r\n\t\t\t\tmethod: \"PATCH\",\r\n\t\t\t\tbody: {\r\n\t\t\t\t\t...initialUserData,\r\n\t\t\t\t},\r\n\t\t\t}),\r\n\t\t\tinvalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\r\n\t\t}),\r\n\t\tdeleteUser: builder.mutation({\r\n\t\t\tquery: ({ id }) => ({\r\n\t\t\t\turl: `/users`,\r\n\t\t\t\tmethod: \"DELETE\",\r\n\t\t\t\tbody: { id },\r\n\t\t\t}),\r\n\t\t\tinvalidatesTags: (result, error, arg) => [{ type: \"User\", id: arg.id }],\r\n\t\t}),\r\n\t}),\r\n});\r\n\r\nexport const {\r\n\tuseGetUsersQuery,\r\n\tuseAddNewUserMutation,\r\n\tuseUpdateUserMutation,\r\n\tuseDeleteUserMutation,\r\n} = usersApiSlice;\r\n\r\n// returns the query result object\r\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\r\n\r\n// creates memoized selector\r\nconst selectUsersData = createSelector(\r\n\tselectUsersResult,\r\n\t(usersResult) => usersResult.data // normalized state object with ids & entities\r\n);\r\n\r\n//getSelectors creates these selectors and we rename them with aliases using destructuring\r\nexport const {\r\n\tselectAll: selectAllUsers,\r\n\tselectById: selectUserById,\r\n\tselectIds: selectUserIds,\r\n\t// Pass in a selector that returns the users slice of state\r\n} = usersAdapter.getSelectors(\r\n\t(state) => selectUsersData(state) ?? initialState\r\n);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}