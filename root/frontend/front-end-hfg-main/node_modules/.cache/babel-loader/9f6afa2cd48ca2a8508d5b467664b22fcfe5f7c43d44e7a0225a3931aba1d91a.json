{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../app/api/apiSlice\";\nconst filesAdapter = createEntityAdapter({});\nconst initialState = filesAdapter.getInitialState();\nexport const fileApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getFiles: builder.query({\n      query: () => \"api/files\",\n      validateStatus: (response, result) => {\n        return response.status === 200 && !result.isError;\n      },\n      transformResponse: responseData => {\n        const loadedFiles = responseData.map(file => {\n          file.id = file._id;\n          return file;\n        });\n        return filesAdapter.setAll(initialState, loadedFiles);\n      }\n    }),\n    uploadFile: builder.mutation({\n      query: initialUserData => ({\n        url: \"api/files/\",\n        method: \"POST\",\n        body: {\n          ...initialUserData\n        }\n      })\n    })\n  })\n});\nexport const {\n  useUploadFileMutation,\n  useGetFilesQuery\n} = fileApiSlice;\nexport const selectFileResult = fileApiSlice.endpoints.getFiles.select();\nconst selectFilesData = createSelector(selectFileResult, fileResult => fileResult.data);\nexport const {\n  selectAll: selectAllFiles,\n  selectById: selectFileById,\n  selectIds: selectFileIds\n} = filesAdapter.getSelectors(state => {\n  var _selectFilesData;\n  return (_selectFilesData = selectFilesData(state)) !== null && _selectFilesData !== void 0 ? _selectFilesData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","filesAdapter","initialState","getInitialState","fileApiSlice","injectEndpoints","endpoints","builder","getFiles","query","validateStatus","response","result","status","isError","transformResponse","responseData","loadedFiles","map","file","id","_id","setAll","uploadFile","mutation","initialUserData","url","method","body","useUploadFileMutation","useGetFilesQuery","selectFileResult","select","selectFilesData","fileResult","data","selectAll","selectAllFiles","selectById","selectFileById","selectIds","selectFileIds","getSelectors","state","_selectFilesData"],"sources":["D:/LocalUniversityStuff/Spring2023/Human Factors/notemaxrepository/root/frontend/front-end-hfg-main/src/features/fileApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../app/api/apiSlice\";\r\n\r\nconst filesAdapter = createEntityAdapter({})\r\nconst initialState = filesAdapter.getInitialState();\r\n\r\nexport const fileApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: (builder) => ({\r\n        getFiles: builder.query({\r\n            query: () => \"api/files\",\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            transformResponse: (responseData) => {\r\n                const loadedFiles = responseData.map((file) => {\r\n                    file.id = file._id;\r\n                    return file;\r\n                });\r\n                return filesAdapter.setAll(initialState, loadedFiles)\r\n            }\r\n        }),\r\n        uploadFile: builder.mutation({\r\n            query: (initialUserData) => ({\r\n                url: \"api/files/\", \r\n                method: \"POST\",\r\n                body: {\r\n                    ...initialUserData\r\n                }\r\n            })\r\n        }) \r\n    })\r\n})\r\n\r\nexport const {\r\n    useUploadFileMutation, \r\n    useGetFilesQuery\r\n} = fileApiSlice;\r\n\r\nexport const selectFileResult = fileApiSlice.endpoints.getFiles.select();\r\n\r\nconst selectFilesData = createSelector(\r\n    selectFileResult, \r\n    (fileResult) => fileResult.data\r\n)\r\n\r\nexport const {\r\n    selectAll: selectAllFiles,\r\n    selectById: selectFileById,\r\n    selectIds: selectFileIds\r\n} = filesAdapter.getSelectors(\r\n    (state) => selectFilesData(state) ?? initialState\r\n)"],"mappings":"AAAA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,MAAMC,YAAY,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC5C,MAAMG,YAAY,GAAGD,YAAY,CAACE,eAAe,EAAE;AAEnD,OAAO,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACjDC,SAAS,EAAGC,OAAO,KAAM;IACrBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,WAAW;MACxBC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,MAAM,CAACE,OAAO;MACrD,CAAC;MACDC,iBAAiB,EAAGC,YAAY,IAAK;QACjC,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAAEC,IAAI,IAAK;UAC3CA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACf,CAAC,CAAC;QACF,OAAOlB,YAAY,CAACqB,MAAM,CAACpB,YAAY,EAAEe,WAAW,CAAC;MACzD;IACJ,CAAC,CAAC;IACFM,UAAU,EAAEhB,OAAO,CAACiB,QAAQ,CAAC;MACzBf,KAAK,EAAGgB,eAAe,KAAM;QACzBC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UACF,GAAGH;QACP;MACJ,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTI,qBAAqB;EACrBC;AACJ,CAAC,GAAG1B,YAAY;AAEhB,OAAO,MAAM2B,gBAAgB,GAAG3B,YAAY,CAACE,SAAS,CAACE,QAAQ,CAACwB,MAAM,EAAE;AAExE,MAAMC,eAAe,GAAGnC,cAAc,CAClCiC,gBAAgB,EACfG,UAAU,IAAKA,UAAU,CAACC,IAAI,CAClC;AAED,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;AACf,CAAC,GAAGxC,YAAY,CAACyC,YAAY,CACxBC,KAAK;EAAA,IAAAC,gBAAA;EAAA,QAAAA,gBAAA,GAAKX,eAAe,CAACU,KAAK,CAAC,cAAAC,gBAAA,cAAAA,gBAAA,GAAI1C,YAAY;AAAA,EACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}